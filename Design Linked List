#Reference mainly on Leetcode problems.
#Designing functions for linked list mainly on my original idea with the explanation to each line of code.  

struct Node
{
    int val;
    Node* next;
}; //making nodes for linked list 

class MyLinkedList {
private: // private members can be modified and accessed within the class. 
    Node* head = NULL;
    Node* tail = NULL;
public:  // can be accessed outside the class but not outside the program.
    MyLinkedList() {
        
    }
    int node_length(Node* head) //retrieving the numbers of nodes in linked list (single).
    {
        int n = 0;
        while(head) 
        {
            head = head->next;
            n++;
        }
        return n;
    }
    int get(int index) { // retrieves the value from corresponding index in linked list 
        Node* curr = head;
        if(!curr)
        {
            return -1; // if NULL on 
        }
        for(int i = 0; i < index; i++)
        {
            curr = curr->next ? curr->next : NULL;
            if(!curr)
            {
                break;
            }
        }
        return curr ? curr->val: -1;
    } // passed 
    
    void addAtHead(int val) {
        Node* temp = new Node();
        temp->val = val;
        temp->next = nullptr; // forming a node for head
        if(!head) // if head does not exist(no node on linked list), head points the temp.
        {
            head = temp;
            return;
        }
        //else
        temp->next = head; //  Node should point the header 
        head = temp; // head should move to temp node 
    } // passed 
    
    void addAtTail(int val) {
        Node* temp = new Node();
        temp->val = val;
        temp->next = nullptr; // creating node for tail nodes
        if(!head) // empty linked list
        {
            tail = temp;
            head = temp;
            return;
        }
        Node* search = head; // search for the tail node in single linked list
        while(search->next)
        {
            search = search->next;
        } // if search reaches the tail Node
        search->next = temp; // tail node's pointer points the temp node 
        tail = temp; // tail points the temp 
        
    }
    
    void addAtIndex(int index, int val) {
        Node* add_node = new Node();  
        add_node->val = val; // creating nodes for certain index 
        Node* prev = new Node();  // Pointing node that is behind the indexed node 
        Node* curr = head; // pointing the current node(node at the index)
        if(node_length(head) < index)
        {
            return; 
        } // if index is beyond the total length of linked list, should not be added.
        if(!head && index == 0)
        {
            head = add_node;
            return;
        } //if no head and index is 0, should add head instead of tail 
        if(head && index == 0)
        {
            add_node->next = head;
            head = add_node;
            return;
        }// if head exists, the node should be added before head and added node should be pointed as head.
        
        for(int i = 0; i < index; i++)
        {
            prev = curr;
            curr = curr->next;
        } // looping through to find the node of certain index 
        add_node->next = curr;
        prev->next = add_node;   
    }
    void deleteAtIndex(int index) {
        Node* prev = new Node(); // prev to find the node before the indexed node 
        Node* curr = head; // pointing the indexed node 
        if(index == 0 && head)
        {
            head = head->next;
            curr = nullptr;
            delete(curr);
            return;
        } // 
        for(int i = 0; i < index; i++)
        {
            prev = curr;
            curr = curr->next;
            if(!curr)
            {
                return;
            } // if index is beyong the lenght of linked list 
        } 
        prev->next = curr->next;
        curr->next = nullptr;
        delete(curr);
    }
};
